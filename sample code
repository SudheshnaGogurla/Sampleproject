https://github.com/GCuser99/SeleniumVBA
https://github.com/areed1192/sigma_coding_youtube/tree/master/vba/vba-outlook
https://github.com/kyle-mckay/VBA-Functions/blob/744bc3cd2d5588cf0644cc4f3a4b8c5b854f8dfe/create-outlook-email/OutlookEmail.bas
https://github.com/longhorn09/vba/blob/5bf06f50e10ba208f3e607a880ee9774c8ff2bd9/utility.vbs
Jmeter functions
${__time(yyyy-MM-dd'T'HH:mm:ss.SSS'Z')}

${__timeShift(yyyy-MM-dd'T'HH:mm:ss.SSS'Z',,PT5H,,)}

${__time(yyyy-MM-dd'T'HH:mm:ss)}

=IF(ISNUMBER(MATCH(B11,$A$1:$A$5000,0)),"Yes","No")
=IFERROR(VLOOKUP(F2,$A$2:$B$10000,MATCH(G$1,$A$1:$B$1,0),0),"No Data Exists")
Sheets("VBAAPI").ComboBox1.Value

Set rngFound = Sheets("Macro").Columns("A").Find("TargetCSVNAME", Cells(Rows.Count, "A"), xlValues, xlWhole)
RowstartHeaderNo = rngFound.Row

Set cell = Sheets("Logins").Range("A1:DQ1").Find(Trim(columnUpdate), SearchOrder:=xlColumns)
 SourceColumnIndex = cell.Column


Function delrows()
'        Dim ws3 As Worksheet
'
'        Set ws3 = ThisWorkbook.Sheets("GSAM")
'        ilimit = ws3.UsedRange.Rows.Count
'        For k = 2 To ilimit
'            ws3.Cells(2, 1).EntireRow.Delete
'        Next
        
        Worksheets("Plan").Rows(5 & ":" & Worksheets("Plan").Rows.Count).Delete

End Function

 totRows = Sheets("Plan").Range("E" & Sheets("Plan").Rows.Count).End(xlUp).Row
        
       Set WB = ThisWorkbook.Sheets("Plan")
       
        sRest = ""
  Jquery = Sheets("Plan").Cells(2, 6)
  GetUrl = "http://test.jira.services.test.com/jira"
  Call URLEncode(Jquery, Query)
  ApiUrl = GetUrl + "/rest/api/2/search?jql=" + Query + "&startAt=" + _
                        CStr(startAt) + "&maxResults=" + _
                        CStr(maxResults) & "&fields=customfield_15744,customfield_15628,customfield_15621,customfield_12683,customfield_15725,customfield_11770,customfield_15921,priority,status,key,summary,assignee,reporter,created,resolutiondate,duedate"

'  ApiUrl = GetUrl + "/rest/api/2/search?jql=" + Query + "&startAt=" + _
'                        CStr(startAt) + "&maxResults=" + _
'                        CStr(maxResults)
       
       With oJiraService
    .Open "GET", ApiUrl, False
    .setRequestHeader "Content-Type", "application/json"
    '.setRequestHeader "Accept", "application/json"
    .send
    sRest = .responseText
    sStatus = .Status & " | " & .statusText
  End With
  
  
  Function regExpression(ByVal strexp, ByRef strChkval)

     Dim objRegExp As Regexp
     Set objRegExp = New Regexp
     objRegExp.IgnoreCase = True
     objRegExp.Global = True
     objRegExp.Pattern = "\>(.*?)\<"
     Set Matches = objRegExp.Execute(strexp)
     'Get the results by using a For Loop
     For Each Match In Matches
         strChkval = Replace(strChkval + Match.Value, ">", "")
          strChkval = Trim(Left(strChkval, Len(strChkval) - 1))
     Next
End Function
Function sbVBS_To_Delete_EntireColumn_For_Loop()
    Set iWS = ThisWorkbook.Sheets("LD_Result")
    lColumn = iWS.UsedRange.Columns.Count
    For iCntr = 2 To lColumn
    iWS.Columns(2).EntireColumn.Delete
    Next
End Function

  Set objMail = CreateObject("CDO.Message")
Set objConf = CreateObject("CDO.Configuration")
Set objFlds = objConf.Fields

'Set various parameters and properties of CDO object
objFlds.Item("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2 'cdoSendUsingPort
'your smtp server domain or IP address goes here such as smtp.yourdomain.com
objFlds.Item("http://schemas.microsoft.com/cdo/configuration/smtpserver") = "LonAnonSMTPRelay.internal.xxx.com" 
objFlds.Item("http://schemas.microsoft.com/cdo/configuration/smtpserverport") = 25 'default port for email
'uncomment next three lines if you need to use SMTP Authorization
objFlds.Item("http://schemas.microsoft.com/cdo/configuration/sendusername") = "dd@gm.com"
objFlds.Item("http://schemas.microsoft.com/cdo/configuration/sendpassword") = "TestPass"
objFlds.Item("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate") = 2 'cdoBasic
objFlds.Update
objMail.Configuration = objConf
objMail.From = "dd@gm.com"
objMail.To = "dd@gm.com"
objMail.Subject = " Status"
strMessgaeBody= "Find enclosed invoice status sheet" & vbCrLf 
'strMessgaeBody= strMessgaeBody+ "Thanks " & vbCrLf 
"
objMail.TextBody = strMessgaeBody
objMail.AddAttachment sTestScript
objMail.Send

'Set all objects to nothing after sending the email
Set objFlds = Nothing
Set objConf = Nothing
Set objMail = Nothing
  
VBA References

Delete

Sheets("input_JbaCandidateCreation").Range(DeleteRangeJson).ClearContents


Count

Sheets("600ExistingDupCandidate").Range("A" & Sheets("600ExistingDupCandidate").Rows.Count).End(xlUp).Row

Open Fetch and delete data

Sub GetandDeleteData()

Application.ScreenUpdating = False
Dim ogwb As Workbook
Set ogwb = ThisWorkbook
Dim wb As Workbook
Dim rng As Range
Dim ws As Worksheet

''Calculate no of rows
strTotalRows = Sheets("Source").Range("A" & Sheets("Source").Rows.Count).End(xlUp).Row
Mainpath = Sheets("Source").Cells(1, 3)

DeleteRangeJson = "C3:T" & strTotalRows

On Error Resume Next
Sheets("Source").Range(DeleteRangeJson).ClearContents
On Error GoTo 0

For intsheets = 3 To strTotalRows
      
    countryName = Right(Sheets("Source").Cells(intsheets, 1), 3)
    scriptName = Sheets("Source").Cells(intsheets, 1)
    DeleteRowFlag = Sheets("Source").Cells(intsheets, 2)
    Path = Mainpath & countryName & "\" & scriptName & ".csv"
    Set wb = Workbooks.Open(Filename:=Path)
    open_file = wb.Name
    Set wb = Workbooks(open_file)
    Set ws = wb.Worksheets(1)
    LastRow = ws.Cells(Rows.Count, "A").End(xlUp).Row
    readcolumns = ""
    If LastRow > 1 Then
    
         Intcolumn = 3
         For i = 1 To 30
           Output = ws.Cells(LastRow, i).Value
            If Output <> "" Then
             ogwb.Activate
             Sheets("Source").Cells(intsheets, Intcolumn) = Output
             Intcolumn = Intcolumn + 1
            End If
         Next
         
         'Delete Last row
         StrRange = "A" & LastRow
         If DeleteRowFlag = "Yes" Then
          ws.Range(StrRange).EntireRow.Delete
         End If
    End If
    wb.Close SaveChanges:=True

Next

MsgBox "Completed"


End Sub

'Columncount

colCountInMacro = Sheets("Macro").Cells(intRowcount, Columns.Count).End(xlToLeft).Column

Find row in column

Set rngFound = Sheets("Logins_FE").Columns("A").Find(Trim(countryName), Cells(Rows.Count, "A"), xlValues, xlWhole)
     RowstartCountryFind = rngFound.Row

After some range second one

Set cell = Sheets("Logins_FE").Range(StrRange).Find(Trim(countryName), After:=Range(AftercellRange))
        FoundinRow = cell.Row
        Set cell = Nothing
Copy range and paste and delete

Sheets("Scalability_Input").Activate
	Sheets("Scalability_Input").Activate
lastColumn = Sheets("Scalability_Input").Cells(scalabilityReferenceRow - 1, Columns.Count).End(xlToLeft).Column
Sheets("Scalability_Input").Range(Cells(scalabilityReferenceRow, "B"), Cells(scalabilityReferenceRow, lastColumn)).Copy
Sheets("targetsheet").Activate
Sheets("targetsheet").Range(Cells(2, "B"), Cells(2 + VInSertNum - 1, lastColumn)).Select
Selection.Insert Shift:=xlDown
''delete first column
Sheets("targetsheet").Cells(1, 1).EntireColumn.Delete
'xRow = xRow + VInSertNum - 1
''update columnnames
Sheets("Scalability_Input").Activate
Sheets("Scalability_Input").Range(Cells(scalabilityReferenceRow - 1, "B"), Cells(scalabilityReferenceRow - 1, lastColumn)).Copy
Sheets("targetsheet").Activate
Sheets("targetsheet").Range(Cells(1, "A"), Cells(1, lastColumn)).Select
Selection.Insert Shift:=xlToRight
  
  ''Excel Formulas
=IFERROR(VLOOKUP(G2,$B$2:$D$10000,MATCH(H$1,$B$1:$D$1,0),0),"No Data Exists")
=IFERROR(VLOOKUP(G2,$B$2:$D$10000,MATCH(I$1,$B$1:$D$1,0),0),"No Data Exists")
https://github.com/Salmankadiwal/Advanced-Excel-Formulas-and-Functions

Azure Devops
  apiURL = "https://dev.azure.com/xxxx/xxx/_apis/pipelines?api-version=6.1-preview.1"
    'apiURL = "https://dev.azure.com/pagegroup-groupservices/Global Page Test Automation/_apis/pipelines/260/runs?api-version=6.1-preview.1"
    'Set objHTTP = New MSXML2.ServerXMLHTTP60
    Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP")
    objHTTP.Open "GET", apiURL, False
    objHTTP.setRequestHeader "Content-Type", "application/json"
    objHTTP.setRequestHeader "Accept", "application/json"
    objHTTP.setRequestHeader "Authorization", "Basic " & encodeBase64_1(JIRA_USER & ":" & JIRA_PWD)
    objHTTP.send
    responseText = objHTTP.responseText
    sStatus = objHTTP.Status & " | " & objHTTP.statusText
    Call PipelineName(responseText, "name")
    Call PipelineNumber(responseText, "id")

Public Function PipelineNumber(ByVal strText, ByVal strCheck)
    Dim objRegexp As RegExp
    Set objRegexp = New RegExp
    objRegexp.IgnoreCase = True
    objRegexp.Global = True
    'strText = Sheets("Data").Cells(1, 1)
    'strCheck = "id"
    strcheckexpression = "" & strCheck & """" & ":([\s\S]+?),"
    objRegexp.Pattern = strcheckexpression
    Set matches = objRegexp.Execute(strText)
    rowno = 2
    For Each Match In matches
        strReturnValue = Match.Value
        strReturnValue = Replace(strReturnValue, strText, "")
        strReturnValue = Replace(strReturnValue, """", "")
        strReturnValue = Replace(strReturnValue, ":", "")
        strReturnValue = Replace(strReturnValue, ",", "")
        strReturnValue = Replace(strReturnValue, " ", "")
        strReturnValue = Replace(strReturnValue, "id", "")
        Sheets("PipeLines").Cells(rowno, 2) = strReturnValue
      rowno = rowno + 1
    Next

    Set objRegexp = Nothing
End Function
StartTime = Timer
MinutesElapsed = Format((Timer - StartTime) / 86400, "hh:mm:ss")

Call ReturnResult(responseText, "result", output)
Public Function ReturnResult(ByVal strText, ByVal strCheck, ByRef strReturnResult)
    Dim objRegexp As RegExp
    Set objRegexp = New RegExp
    objRegexp.IgnoreCase = True
    objRegexp.Global = True

    strcheckexpression = "" & strCheck & """" & ":([\s\S]+?),"
    objRegexp.Pattern = strcheckexpression
    Set matches = objRegexp.Execute(strText)

    For Each Match In matches
        strReturnValue = Match.Value
        strReturnValue = Replace(strReturnValue, strText, "")
        strReturnValue = Replace(strReturnValue, """", "")
        strReturnValue = Replace(strReturnValue, ":", "")
        strReturnValue = Replace(strReturnValue, ",", "")
        strReturnValue = Replace(strReturnValue, " ", "")
        strReturnValue = Replace(strReturnValue, strCheck, "")
        If strCheck = "createdDate" Then
        Exit For
        End If
       
        If InStr(strReturnValue, "succeeded") > 0 Then
           strFound = True
           Exit For
        End If
        If InStr(strReturnValue, "failed") > 0 Then
           strFound = True
           Exit For
        End If
    Next
    strReturnResult = strReturnValue

    Set objRegexp = Nothing
End Function

objRegExp.Pattern = "\>(.*?)\
objRegExp.Pattern = "\>(.*?)\<"

objRegExp.Pattern = "<\s*td[^>]*>(.*?)<\s*/\s*td>"

objRegExp.Pattern = "\<td class(.*?)\</tr>"

objRegExp.Pattern = <br/><h4>Provided Input</h4>([\s\S]*?)<br/><br/><h4>Expected Output</h4>"
re2.Pattern = "(<br>|\s)+"
objRegExp.Pattern = "\>(.*?)\
objRegExp.Pattern = "\>(.*?)\<"

objRegExp.Pattern = "<\s*td[^>]*>(.*?)<\s*/\s*td>"

objRegExp.Pattern = "\<td class(.*?)\</tr>"

objRegExp.Pattern = <br/><h4>Provided Input</h4>([\s\S]*?)<br/><br/><h4>Expected Output</h4>"
re2.Pattern = "(<br>|\s)+"
'
textRegExp.Pattern = "\s{0,}(\S{1}[\s,\S]*\S{1})\s{0,}"
objRegexp.Pattern = """displayName"":(.*?""created"":([{\s\S]+?}]))"
strcheckexpression = """" & strCheck & """" & ":([\s\S]+?)"""
objRegExp.Pattern = "<[^>]+>"
objRegExp.Pattern = "\>(.*?)\<"
'open CSV and update other open excel

Sub GetandDeleteData()

Application.ScreenUpdating = False
Dim ogwb As Workbook
Set ogwb = ThisWorkbook
Dim wb As Workbook
Dim rng As Range
Dim ws As Worksheet

''Calculate no of rows
strTotalRows = Sheets("Source").Range("A" & Sheets("Source").Rows.Count).End(xlUp).Row
Mainpath = Sheets("Source").Cells(1, 4)

DeleteRangeJson = "D3:T" & strTotalRows

On Error Resume Next
Sheets("Source").Range(DeleteRangeJson).ClearContents
On Error GoTo 0

For intsheets = 3 To strTotalRows
      
    countryname = Right(Sheets("Source").Cells(intsheets, 1), 3)
    scriptName = Sheets("Source").Cells(intsheets, 1)
    DeleteRowFlag = Sheets("Source").Cells(intsheets, 2)
    DataFetchFlag = Sheets("Source").Cells(intsheets, 3)
    splitname = Split(scriptName, "_")
    Script = splitname(0)
    country = splitname(1)
    
    If DataFetchFlag = "Yes" Then
    'C:\Performance\Scripts\ScalabilityUI\ScalabilityUI-DataGenerator_AE\AccountUpdate\Output\AccountUpdate.csv
    'C:\Performance\Scripts\ScalabilityUI_AE\AccountUpdate_AE.csv
    'Path = Mainpath & countryname & "\" & scriptName & ".csv"
            Path = Mainpath & countryname & "\" & Script & "\Output\" & Script & ".csv"
            Set wb = Workbooks.Open(Filename:=Path)
            open_file = wb.Name
            Set wb = Workbooks(open_file)
            Set ws = wb.Worksheets(1)
            LastRow = ws.Cells(Rows.Count, "A").End(xlUp).Row
            readcolumns = ""
            If LastRow > 1 Then
            
                 Intcolumn = 4
                 For i = 1 To 30
                   Output = ws.Cells(LastRow, i).Value
                    If Output <> "" Then
                     ogwb.Activate
                     Sheets("Source").Cells(intsheets, Intcolumn) = Output
                     Intcolumn = Intcolumn + 1
                    End If
                 Next
                 
                 'Delete Last row
                 StrRange = "A" & LastRow
                 If DeleteRowFlag = "Yes" Then
                  ws.Range(StrRange).EntireRow.Delete
                 End If
            End If
            wb.Close SaveChanges:=True
   End If
Next

MsgBox "Completed"
''replace all

LastRow = ws.Cells(Rows.Count, "A").End(xlUp).Row
            lColumn = ws.Cells.Range("A1").End(xlToRight).Column
            ColumnLetter = Split(ws.Cells(1, Columns.Count).End(xlToLeft).Address, "$")(1)
            StrRangeSearch = "A2:" & ColumnLetter & LastRow
            Set rng = ws.Range(StrRangeSearch)
            
            ws.UsedRange.Replace What:="London2022@@@", Replacement:="London2022@@@@"


End Sub

Dictinary for excel macro JSON

'-------------------------------------------------------------------
' VBA JSON Parser
'-------------------------------------------------------------------

Function ParseJSON(json$, Optional key$ = "obj") As Object
    p = 1
    token = Tokenize(json)
    Set dic = CreateObject("Scripting.Dictionary")
    If token(p) = "{" Then ParseObj key Else ParseArr key
    Set ParseJSON = dic
End Function
Function ParseObj(key$)
    Do: p = p + 1
        Select Case token(p)
            Case "]"
            Case "[":  ParseArr key
            Case "{"
                       If token(p + 1) = "}" Then
                           p = p + 1
                           dic.Add key, "null"
                       Else
                           ParseObj key
                       End If
                
            Case "}":  key = ReducePath(key): Exit Do
            Case ":":  key = key & "." & token(p - 1)
            Case ",":  key = ReducePath(key)
            Case Else: If token(p + 1) <> ":" Then dic.Add key, token(p)
        End Select
    Loop
End Function
Function ParseArr(key$)
    Dim e&
    Do: p = p + 1
        Select Case token(p)
            Case "}"
            Case "{":  ParseObj key & ArrayID(e)
            Case "[":  ParseArr key
            Case "]":  Exit Do
            Case ":":  key = key & ArrayID(e)
            Case ",":  e = e + 1
            Case Else: dic.Add key & ArrayID(e), token(p)
        End Select
    Loop
End Function
'-------------------------------------------------------------------
' Support Functions
'-------------------------------------------------------------------
Function Tokenize(s$)
    Const Pattern = """(([^""\\]|\\.)*)""|[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?|\w+|[^\s""']+?"
    Tokenize = RExtract(s, Pattern, True)
End Function
Function RExtract(s$, Pattern, Optional bGroup1Bias As Boolean, Optional bGlobal As Boolean = True)
  Dim c&, m, n, v
  With CreateObject("vbscript.regexp")
    .Global = bGlobal
    .MultiLine = False
    .IgnoreCase = True
    .Pattern = Pattern
    If .Test(s) Then
      Set m = .Execute(s)
      ReDim v(1 To m.Count)
      For Each n In m
        c = c + 1
        v(c) = n.Value
        If bGroup1Bias Then If Len(n.SubMatches(0)) Or n.Value = """""" Then v(c) = n.SubMatches(0)
      Next
    End If
  End With
  RExtract = v
End Function
Function ArrayID$(e)
    ArrayID = "(" & e & ")"
End Function
Function ReducePath$(key$)
    If InStr(key, ".") Then ReducePath = Left(key, InStrRev(key, ".") - 1) Else ReducePath = key
End Function
Function ListPaths(dic)
    Dim s$, v
    For Each v In dic
        s = s & v & " --> " & dic(v) & vbLf
    Next
    Debug.Print s
End Function
Function GetFilteredValues(dic, match)
    Dim c&, i&, v, w
    v = dic.Keys
    ReDim w(1 To dic.Count)
    For i = 0 To UBound(v)
        If v(i) Like match Then
            c = c + 1
            w(c) = dic(v(i))
        End If
    Next
    ReDim Preserve w(1 To c)
    GetFilteredValues = w
End Function
Function GetFilteredTable(dic, cols)
    Dim c&, i&, j&, v, w, z
    v = dic.Keys
    z = GetFilteredValues(dic, cols(0))
    ReDim w(1 To UBound(z), 1 To UBound(cols) + 1)
    For j = 1 To UBound(cols) + 1
         z = GetFilteredValues(dic, cols(j - 1))
         For i = 1 To UBound(z)
            w(i, j) = z(i)
         Next
    Next
    GetFilteredTable = w
End Function
Function OpenTextFile$(f)
    With CreateObject("ADODB.Stream")
        .Charset = "utf-8"
        .Open
        .LoadFromFile f
        OpenTextFile = .ReadText
    End With
End Function

DeleteRangeJson = "A1:M50000"
On Error Resume Next
Sheets("test").Range(DeleteRangeJson).ClearContents
On Error GoTo 0
mainworkBook.Sheets("OrgDup600").UsedRange.Copy
mainworkBook.Sheets("test").Select
mainworkBook.Sheets("test").Range("A1").Select
mainworkBook.Sheets("test").Paste
mainworkBook.Sheets("test1").Select
